{"version":3,"sources":["assets/cv.svg","assets/github.svg","assets/email.svg","assets/smartphone.svg","Projects.js","Components/Item.js","Components/Portfolio.js","Components/About.js","Components/Homepage.js","Components/Main.js","Components/Contact.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Projects","id","name","tech","description","image","cvLogo","Item","src","Portfolio","portfolioItem","map","project","i","key","className","About","Homepage","to","Main","basename","exact","path","component","React","Component","href","githubLogo","emailLogo","phoneLogo","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,gC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,uTC4C5BC,EAvCS,CACtB,CACEC,GAAI,EACJC,KAAM,SACNC,KAAM,CACJ,OACA,MACA,OACA,SAEFC,YAAa,QACbC,MAAO,WAET,CACEJ,GAAI,EACJC,KAAM,SACNC,KAAM,CACJ,OACA,MACA,OACA,SAEFC,YAAa,QACbC,MAAO,CAACC,aAEV,CACEL,GAAI,EACJC,KAAM,SACNC,KAAM,CACJ,OACA,MACA,OACA,SAEFC,YAAa,QACbC,MAAO,YC3BIE,EATF,SAAC,GAAqB,IAAnBF,EAAkB,EAAlBA,MAAOH,EAAW,EAAXA,KACrB,OACE,6BACE,4BAAKA,GACL,yBAAKM,IAAKH,MCYDI,EAfI,WAChB,IAAMC,EAAgBV,EAASW,KAAI,SAACC,EAASC,GAC3C,OAAO,kBAAC,EAAD,CACPC,IAAKD,EACLX,KAAMF,EAASa,GAAGX,KAClBG,MAAOL,EAASa,GAAGR,WAErB,OACE,yBAAMU,UAAU,SACfL,ICHSM,EARD,WACZ,OACE,6BACA,qGCcWC,EAbE,WACf,OACE,yBAAKF,UAAU,SACb,wBAAIA,UAAU,eAAd,wBACA,uBAAGA,UAAU,cAAb,gCACA,yBAAKA,UAAU,WACb,kBAAC,IAAD,CAAMA,UAAU,cAAcG,GAAG,cAAjC,aACA,kBAAC,IAAD,CAAMH,UAAU,cAAcG,GAAG,UAAjC,Y,OCLaC,E,iLAEjB,OACE,kBAAC,IAAD,CAAYC,SAAS,KACrB,yBAAKL,UAAU,WACb,kBAAC,IAAD,CAAOM,OAAO,EAAMC,KAAK,IAAIC,UAAWN,IACxC,kBAAC,IAAD,CAAOK,KAAK,SAASC,UAAWP,IAChC,kBAAC,IAAD,CAAOM,KAAK,aAAaC,UAAWd,U,GAPVe,IAAMC,WCkBzBT,G,MAnBD,WACZ,OACE,yBAAKD,UAAU,YACf,6BACE,uBAAGA,UAAU,gBAAgBW,KAAK,IAAG,yBAAKlB,IAAKmB,MAA/C,WAEF,6BACE,uBAAGZ,UAAU,gBAAgBW,KAAK,IAAG,yBAAKlB,IAAKF,MAAU,uCAE3D,6BACE,uBAAGS,UAAU,gBAAgBW,KAAK,IAAG,yBAAKlB,IAAKoB,MAA/C,UAEF,6BACE,uBAAGb,UAAU,gBAAgBW,KAAK,IAAG,yBAAKlB,IAAKqB,MAA/C,aCNSC,EARH,kBACV,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACT,kBAAC,EAAD,MACAC,SAASC,eAAe,SDwHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5deea589.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cv.936d0f42.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.76d344f0.svg\";","module.exports = __webpack_public_path__ + \"static/media/email.af6134f2.svg\";","module.exports = __webpack_public_path__ + \"static/media/smartphone.4e0c281b.svg\";","import githubLogo from './assets/github.svg';\r\nimport emailLogo from './assets/email.svg';\r\nimport phoneLogo from './assets/smartphone.svg';\r\nimport cvLogo from './assets/cv.svg';\r\n\r\nexport const Projects = [\r\n  {\r\n    id: 1,\r\n    name: 'Site 1',\r\n    tech: [\r\n      'HTML',\r\n      'CSS',\r\n      'SASS',\r\n      'React'\r\n    ],\r\n    description: 'Lorem',\r\n    image: '/cv.svg'\r\n  },\r\n  {\r\n    id: 1,\r\n    name: 'Site 2',\r\n    tech: [\r\n      'HTML',\r\n      'CSS',\r\n      'SASS',\r\n      'React'\r\n    ],\r\n    description: 'Lorem',\r\n    image: {cvLogo}\r\n  },\r\n  {\r\n    id: 1,\r\n    name: 'Site 3',\r\n    tech: [\r\n      'HTML',\r\n      'CSS',\r\n      'SASS',\r\n      'React'\r\n    ],\r\n    description: 'Lorem',\r\n    image: '/cv.svg'\r\n  }\r\n];\r\n\r\nexport default Projects;","import React from 'react';\r\nimport './Main.scss';\r\nimport Projects from '../Projects';\r\n\r\nconst Item = ({ image, name }) => {\r\n  return (\r\n    <div>\r\n      <h1>{name}</h1>\r\n      <img src={image} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Item;","import React from \"react\"\r\nimport './Main.scss';\r\nimport Projects from '../Projects';\r\nimport Item from './Item';\r\n\r\n const Portfolio = () => {\r\n   const portfolioItem = Projects.map((project, i) => {\r\n     return <Item\r\n     key={i}\r\n     name={Projects[i].name}\r\n     image={Projects[i].image}/>\r\n   })\r\n   return (\r\n     <div  className='intro'>\r\n     {portfolioItem}\r\n     </div>\r\n   )\r\n }\r\n\r\n \r\nexport default Portfolio;","import React from \"react\"\r\n\r\n\r\nconst About = () => {\r\n  return (\r\n    <div>\r\n    <h1>JSADDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD</h1>\r\n    </div>\r\n  )\r\n}\r\n \r\nexport default About;","import React from \"react\"\r\nimport Portfolio from './Portfolio';\r\nimport About from './About';\r\nimport './Main.scss';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst Homepage = () => {\r\n  return (\r\n    <div className='intro'>\r\n      <h1 className='mainHeading'>Vikintas Raudavicius</h1>\r\n      <p className='subHeading'>Front-End Developer you need</p>\r\n      <div className='buttons'>\r\n        <Link className='buttonIntro' to='/Portfolio'>Portfolio</Link>\r\n        <Link className='buttonIntro' to='/About'>About</Link>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Homepage;\r\n\r\n","import React from \"react\"\r\nimport Portfolio from './Portfolio';\r\nimport Homepage from './Homepage';\r\nimport About from './About';\r\nimport './Main.scss';\r\nimport { Route, HashRouter } from 'react-router-dom';\r\n\r\n\r\n\r\nexport default class Main extends React.Component {\r\n  render () {\r\n    return (\r\n      <HashRouter basename='/'>\r\n      <div className=\"wrapper\">\r\n        <Route exact={true} path=\"/\" component={Homepage}/>\r\n        <Route path=\"/about\" component={About}/>\r\n        <Route path=\"/portfolio\" component={Portfolio}/>\r\n      </div>\r\n      </HashRouter>\r\n    )\r\n  }\r\n}\r\n","import React from \"react\"\r\nimport './Contact.scss';\r\nimport githubLogo from '../assets/github.svg';\r\nimport emailLogo from '../assets/email.svg';\r\nimport phoneLogo from '../assets/smartphone.svg';\r\nimport cvLogo from '../assets/cv.svg';\r\n\r\n\r\nconst About = () => {\r\n  return (\r\n    <div className='contacts'>\r\n    <div>\r\n      <a className='space-between' href=''><img src={githubLogo} />Github</a>\r\n    </div>\r\n    <div>\r\n      <a className='space-between' href=''><img src={cvLogo} /><p>Resume</p></a>\r\n    </div>\r\n    <div>\r\n      <a className='space-between' href=''><img src={emailLogo} />Email</a>\r\n    </div>\r\n    <div>\r\n      <a className='space-between' href=''><img src={phoneLogo} />Phone</a>\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\n \r\nexport default About;\r\n\r\n\r\n","import React, {Component} from \"react\";\r\nimport './App.scss';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport Main from './Components/Main';\r\nimport Contact from './Components/Contact';\r\n\r\nconst App = () => (\r\n  <BrowserRouter>\r\n    <Main />\r\n    <Contact />\r\n  </BrowserRouter>\r\n)\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Projects } from './Projects';\n\nReactDOM.render(\n<App />,\ndocument.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}